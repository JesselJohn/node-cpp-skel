language: generic

sudo: false

cache: apt

# build options and AWS keys for publishing binaries
# note: you'll need to generate your own keys for publishing a separate project
env:
  global:
    - LSAN_OPTIONS=suppressions=scripts/leak_suppressions.txt
    - secure: FdVVvHIcKe3pa228D9A4e/sspfrg7I0T2SbXkD4EILBVahA9CBmX+ruNR/ZEKXfWtuhGf5G+/r0DOk0sT+G+hAaAx6QtFOAt+AY2dMlB0Up+f/8tr8cAWk0+Te3yUyrKXcRRqSmPx3XIcYERhQGoNNlhaivxW0juIAB5Kn4f0RqyuzsiuzZFFzRzp1cj8D9nGA3tRtiXWKBPtltVjmNH234sK6/ztlHnMo5bqbL0NJcfKGPbY35mQkgWgcbsogeoU6D6h8E1mbS0oDxo7NSJbUaF5RtWbnPemE80Gj7IBUiqvmiqZV7e1EiSgGWX/cmTLAqniTFDrdjk5YntYPi4rHOxMnDCumJ8LQP+vWXjGLxHeWjwXzNRkFLuSMqzvnaAc0URpxHpaJ997l+a1/JQDtUtX/5zVTJsZ8/RHh40QyY/WUwVpcR601SeodSQ1vO5gVghXWh7BdIPA9lwI9eBenoL3wBMRnlwvjMatXXh5uirEiZIWov7DjOl6so67IxTivDQ06TuCAURUYFB61ToYJs+hdSrw83u/AKNgm3eAcz8qeL0YQ6ReAx/bCDIu5YcXBY17yeySOF7xBNM3a7X8+9Ejbqgphik0mAjC/3Z6Uuds3GGIRZmd4XA153TvPBYUHi5tSEUSbpVtAJ5YVp2ETqp64IdChDB3NnyaMyd8b8=
    - secure: VMiSV/qeHH7unlhFdnYQuVccnba8gOQG1lci1zCfcvbX3GOd6ZI6A1vu2F/AYvXreDMzCLZbLrQ0/2sdtYCvx0Lgrtz4l8myC2TBqrxJLIDkO2rx77oggZuSIo9JQkXfr8qHx2L1RDL5yxSnxY8hr1l7FLzPTF0f4rErQ6gr/kAfOiqRn5k94635mNTW76TTx0fdk8+TuUIXGUcgJiXD6+l0/d7hnHWABztEPE1YoBP4GVoGIBjSAJdU6Z6cbHWIShF4AHkbv94PpVIgpbb3Kq4wmolXKdNXIvWrs0Z/wvGIr2EYKeMcIwOudGATpfwzf1GKc7+TSa5Z3JZInQ7FBEypDzu+LYigGqAGFb8TBj+TGs8KI5iAW4ez1pDfwksNZnMSX6gg4L+3gIn1plxWQ05jagbgzm5s2/d6jPqi7ZVtedE5zQKbCd5Iwkby/TuE5hWCf06Znk7DfEt/IHpFH/2d+9CgcQiFbn7sYyWeArSbiD3eQxCkYh9EuDNSRgt7BZ9g7PglW9phXrKnTCk6VpE0QXR9ehqz/5D3QYrKOb64B1PPAeFonsWCPamxwCt2jCxaqztoBSYfoa3XXM4EMmkLC30u5qGMy9Vv19dhGEOOgZDMWnr1zsiVFMmceecOl0ivxcGkMOCauDB/fGMB4P7m3As0tqgl/59k0bWQ2m4=

# set up dependencies necessary for compiling using apt
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]
  
# set up the environment by installing node, installing mason dependencies,
# setting up clang, and installing node deps
install_default: &setup
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      rvm get head || true
    fi
  - source ./scripts/setup.sh
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make

# build binaries and run tests
script_default: &test
  - make test

# after successful tests, publish binaries if specified in commit message
after_script_default: &publish
  - node-pre-gyp package testpackage ${NPM_FLAGS}
  - source ./scripts/publish.sh

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:
    # linux
    - os: linux
      # node_js: "4"
      env: NODE="4" TARGET="Release"
      install: *setup
      script: *test
      after_script: *publish
    # Coverage build (not publishable)
    - os: linux
      # node_js: "4"
      env: NODE="4" CXXFLAGS="--coverage" LDFLAGS="--coverage" NPM_FLAGS="--debug"
      install: *setup
      script: *test
      after_script:
        - mason install llvm-cov 3.9.0
        - export PATH=$(mason prefix llvm-cov 3.9.0)/bin:${PATH}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
      script: *test
    # Sanitizer build
    - os: linux
      # node_js: "4"
      env: NODE="4" CXXFLAGS="-fsanitize=address" LDFLAGS="-fsanitize=address" NPM_FLAGS="--debug"
      install: *setup
      before_script:
        - export LD_PRELOAD=$(mason prefix clang++ 3.9.0)/lib/clang/3.9.0/lib/linux/libclang_rt.asan-x86_64.so
      script: *test
      after_script:
        - unset LD_PRELOAD
        - mason install llvm-cov 3.9.0
        - export PATH=$(mason prefix llvm-cov 3.9.0)/bin:${PATH}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
      script: *test
    - os: osx
      # node_js: "4"
      osx_image: xcode8
      env: NODE="4" TARGET=Release
      install: *setup
      script: *test
      after_script: *publish